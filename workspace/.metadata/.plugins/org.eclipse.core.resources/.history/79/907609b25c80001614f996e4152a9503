package foo;

import java.util.Stack;

public class DoubleLinkedList {

	DoubleNode root;
	
	public DoubleLinkedList(){
		
	}
	
	DoubleNode addNode(int data){
		
		DoubleNode newNode = new DoubleNode(data);
		
		if (root == null){
			root = newNode;
			return root;
		}
		
		DoubleNode current = root;
		
		while(current != null){
			if(current.next == null){
				current.next = newNode;
				newNode.prev = current;
				return root;
			}
			current = current.next;
		}
		
		return root;
		
	}
	
	public DoubleNode insertNode(int data){
		
		DoubleNode newNode = new DoubleNode(data);
		DoubleNode current = root;
		DoubleNode previous;
		
		if (root == null){
			root = newNode;
		}
		
		if (newNode.data < root.data){
			newNode.next = root;
			root = newNode;
		}
		
		while(current.next != null){
			previous = current;
			current = current.next;
			
			if (newNode.data >= previous.data && newNode.data < current.data){
				previous.next = newNode;
				newNode.prev = previous;
				newNode.next = current;
				current.prev = newNode;
			}	
		}
		
		if (newNode.data > current.data){
			current.next = newNode;
			newNode.prev = current;
		}
		
		return root;
		
	}
	
	public DoubleNode reverseList(){
		
		
		DoubleNode current = root;
		DoubleNode tmp;
		
		while (current != null){
			tmp = current.next;
			current.next = current.prev;
			current.prev = tmp;
			current = current.next;
		}
		
		return root;
		
	}
	
	
	public String toString(){
		
		String rtnVal = "";
		
		DoubleNode current = root;
		
		while (current != null){
			rtnVal = rtnVal + current.data + ":";
			current = current.next;
		}
		
		return rtnVal;
		
	}
	
	
	
	
	
	
	
}

class DoubleNode {
	Integer data;
	DoubleNode next;
	DoubleNode prev;
	
	DoubleNode(int d){
		data = d;
	}
	
	public String toString(){
		return data.toString();
	}
		
}

