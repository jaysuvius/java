package foo;

public class Sorts {
	
	public static <T extends Comparable<? super T>> void bubbleSort(T[] list){
		 for(int i = list.length - 1; i > 1; i--){
            
            // The inner loop starts at the beginning of 
            // the array and compares each value next to each 
            // other. If the value is greater then they are 
            // swapped
            
            for(int j = 0; j < i; j++){
                
                // To change sort to Descending change to <
                
                if(list[j].compareTo(list[j+1]) > 0){
                    
                    swap(list, j, j+1);
                    
                    //printHorzArray(i, j);
                    
                }
                
            }
            
        }
	}
	
	private static <T extends Comparable<? super T>> int getIndexOfSmallest(T[] a, int first, int last){
		T min = a[first];
		int indexOfMin = first;
		for (int i = first + 1; i <= last; i++){
			if(a[i].compareTo(min) < 0){
				min = a[i];
				indexOfMin = i;
			}
			
		}
		return indexOfMin;
	}
	
	public static <T extends Comparable<? super T>> void selectionSort(T[] a, int first, int last){
		if(first < last){
			int indexOfNextSmallest = getIndexOfSmallest(a, first, last);
			swap(a, first, indexOfNextSmallest);
			selectionSort(a, first + 1, last);
		}
		
	}
	
	private static <T extends Comparable<? super T>> void insertInOrder(T item, T[] a, int begin, int end){
		if (item.compareTo(a[end]) > 0 || item.compareTo(a[end]) == 0 ){
			a[end + 1] = item;
		}
		else if (begin < end){
			a[end + 1] = a[end];
		}
		else{
			a[end + 1] = a[end];
			a[end] = item;
		}
			
		
		public static <T extends Comparable<? super T>> void insertionSort(T[] a, int first, int last){
			
			
		}
		
	}
	
	
	
	
	

	private static <T extends Comparable<? super T>> void swap(T[] list, int x, int y){
		T temp = null;
		temp = list[x];
		list[x] = list[y];
		list[y] = temp;
	}
}
